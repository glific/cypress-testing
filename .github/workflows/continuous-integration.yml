name: Continuous Integration

# Controls when the action will run. Triggers the workflow on push or pull request
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  glific:
    # This workflow contains a single job called "build"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12 # postgres image for test database.
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: glific_dev
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      matrix: # build matrix for the job
        elixir: [1.10.4]
        otp: [23.0.2]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      # Runs a set of commands using the runners shell
      - name: Setup backend
        run: |
          echo clone glific repo
          git clone https://github.com/glific/glific.git
          pwd
          ls
          echo done. go to dir.
          cd glific
          ls
          pwd
          echo done. start config
          cd config
          ls
          cp dev.secret.exs.txt dev.secret.exs
          echo copy done. start setup
          cd ../
          ls
          echo start mix setup
          mix setup
          echo done. start installing inotify-tools
          sudo apt-get install inotify-tools
          cd ../../
          echo check path for script
          ls
          pwd

        # frontend setup
      - name: Setup frontend
        run: |
          echo clone glific repo
          git clone https://github.com/glific/glific-frontend.git
          ls
          echo done. go to dir.
          cd glific-frontend
          ls
          echo done.
          cat /proc/sys/fs/inotify/max_user_watches
          echo set watchers
          sudo sysctl fs.inotify.max_user_watches=524288
          sudo sysctl -p
          cat /proc/sys/fs/inotify/max_user_watches
          echo start yarn setup.
          yarn setup
          echo done.
          cd ../
          ls

      - name: Check path for cypress.
        run: |
          echo clone cypress-testing
          git clone https://github.com/glific/cypress-testing.git
          ls
          echo done. go to dir.
          cd cypress-testing
          echo check path for cypress.
          pwd
          ls
          echo Copy Cypress.json from example
          cp cypress.json.example cypress.json
          pwd
          ls

      - name: run glific
        run: |
          pwd
          ls
          cd /home/runner/work/cypress-testing/cypress-testing/glific
          pwd
          ls
          mix phx.server
          background: true

      - name: run glific-frontend
        run: |
          pwd
          ls
          cd /home/runner/work/cypress-testing/cypress-testing/glific-frontend
          pwd
          ls
          yarn start http://glific.test:3000/
          background: true

      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          record: true
