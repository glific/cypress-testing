name: Continuous Integration

# Controls when the action will run.
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  glific:
    runs-on: ubuntu-latest
    container: cypress/browsers:node12.18.3-chrome87-ff82
    services:
      postgres:
        image: postgres:12 # postgres image for test database.
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: glific_dev
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      fail-fast: false
      matrix: # build matrix for the job
        machines: [1, 2, 3, 4]
        elixir: [1.13.3]
        otp: [24.2.2]
        node-version: [16.13.0]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # cypress setup
      - name: Setup cypress-testing
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Give access 
            run: chmod -R 777 /github/home
  
      - name: 'UI Tests - Chrome'
        uses: cypress-io/github-action@v2
        with:
          # we have already installed all dependencies above
          install: true
          start: yarn cy:run
          wait-on: 'https://glific.test:3000'
          wait-on-timeout: 120
          browser: chrome
          record: true
          parallel: true
          group: 'UI - Chrome'
          spec: cypress/integration/*
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Setup elixir
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      # backend setup
      - name: Setup backend
        run: |
          echo '127.0.0.1  glific.test' | sudo tee -a /etc/hosts
          echo '127.0.0.1  api.glific.test' | sudo tee -a /etc/hosts
          mkdir project
          cd project
          echo clone glific repo
          git clone https://github.com/glific/glific.git
          echo done. go to dir.
          cd glific
          echo done. start dev.secret.exs config
          cd priv
          mkdir cert
          cd cert 
          echo "${{ secrets.TEST_CERTIFICATE }}" > glific.test+1.pem
          echo "${{ secrets.TEST_CERTIFICATE_KEY }}" > glific.test+1-key.pem
          cd ../../
          cd config
          cp dev.secret.exs.txt dev.secret.exs
          cp .env.dev.txt .env.dev
          sed -i 's/:max_rate_limit_request, 60/:max_rate_limit_request, 1000/g' config.exs
          echo copy done. start setup
          cd ../
          echo install mix dependencies if not Cached
          mix local.rebar --force
          mix local.hex --force
          mix hex.organization auth oban --key ${{ secrets.OBAN_PRO_KEY }}
          echo done. start installing inotify-tools
          sudo apt-get install inotify-tools
          echo start mix setup
          mix setup
          cd ../../

        # frontend setup
      - name: Setup frontend
        run: |
          cd project
          echo clone glific repo
          git clone https://github.com/glific/glific-frontend.git
          echo done. go to repo dir.
          cd glific-frontend
          echo done.
          echo copy env file.
          cp .env.example .env
          echo done.
          cat /proc/sys/fs/inotify/max_user_watches
          echo set watchers
          sudo sysctl fs.inotify.max_user_watches=524288
          sudo sysctl -p
          cat /proc/sys/fs/inotify/max_user_watches
          echo start yarn setup.
          yarn setup
          echo done.
          cd ../

        # Run frontend
      - name: run glific-frontend
        run: |
          cd /home/runner/work/cypress-testing/cypress-testing/project/glific-frontend
          HOST=glific.test HTTPS=true SSL_CRT_FILE=../glific/priv/cert/glific.test+1.pem SSL_KEY_FILE=../glific/priv/cert/glific.test+1-key.pem yarn start &
     
        # Run backend
      - name: run glific
        run: |
          cd /home/runner/work/cypress-testing/cypress-testing/project/glific
          mix phx.server &

      - name: Wait for 1 minute for the frontend to start
        run: |
          sleep 3m

        # Run cypress
      - name: Cypress run
        run: |
          echo Copy Cypress.json from example
          cp cypress.json.example cypress.json
          yarn install
          yarn cy:run --record --key ${{ secrets.CYPRESS_DASHBOARD_KEY }}
