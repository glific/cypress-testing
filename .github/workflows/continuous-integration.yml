name: Continuous Integration

# Controls when the action will run. Triggers the workflow on push or pull request
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12 # postgres image for test database.
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: glific_dev
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      matrix: # build matrix for the job
        elixir: [1.10.4]
        otp: [23.0.2]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a set of commands using the runners shell
      - name: Setup backend
        run: |
          echo clone glific repo
          git clone https://github.com/glific/glific.git
          ls
          echo done. go to dir.
          cd glific
          echo done.

      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v1
        id: elixir-mix-cache #id to use in retrieve action
        with:
          path: deps
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Install Mix Dependencies if not Cached
        if: steps.elixir-mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
      - name: Retrieve PLT Cache
        uses: actions/cache@v1
        id: elixir-plt-cache #id to use in retrieve action
        with:
          path: priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Create PLTs
        if: steps.elixir-plt-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix dialyzer --plt

      - name: Setup backend
        run: |
          ls
          echo done.
          echo start server.
          mix phx.server
          echo done.

      # Runs a set of commands using the runners shell
      - name: Setup frontend
        run: |
          echo clone glific repo
          git clone https://github.com/glific/glific-frontend.git
          ls
          echo done. go to dir.
          cd glific-frontend
          echo done.
          echo start yarn setup.
          yarn setup
          echo done.
          echo start server.
          mix yarn start
          echo done.

      - name: Copy Cypress.json from example
        run: cp cypress.json.example cypress.json

      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          record: true
